// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pontential_in_complete_graph_case
List pontential_in_complete_graph_case(StringVector& origin, StringVector& dest, NumericVector& trips, StringVector& unique_geozomes);
RcppExport SEXP _HodgePotentialHumanFlow_pontential_in_complete_graph_case(SEXP originSEXP, SEXP destSEXP, SEXP tripsSEXP, SEXP unique_geozomesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type origin(originSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type dest(destSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type trips(tripsSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type unique_geozomes(unique_geozomesSEXP);
    rcpp_result_gen = Rcpp::wrap(pontential_in_complete_graph_case(origin, dest, trips, unique_geozomes));
    return rcpp_result_gen;
END_RCPP
}
// pontential_on_graph
List pontential_on_graph(StringVector& vertex1, StringVector& vertex2, NumericVector& netflow_R, StringVector& unique_geozomes, size_t num_samples, unsigned long int seed);
RcppExport SEXP _HodgePotentialHumanFlow_pontential_on_graph(SEXP vertex1SEXP, SEXP vertex2SEXP, SEXP netflow_RSEXP, SEXP unique_geozomesSEXP, SEXP num_samplesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type vertex1(vertex1SEXP);
    Rcpp::traits::input_parameter< StringVector& >::type vertex2(vertex2SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type netflow_R(netflow_RSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type unique_geozomes(unique_geozomesSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(pontential_on_graph(vertex1, vertex2, netflow_R, unique_geozomes, num_samples, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HodgePotentialHumanFlow_pontential_in_complete_graph_case", (DL_FUNC) &_HodgePotentialHumanFlow_pontential_in_complete_graph_case, 4},
    {"_HodgePotentialHumanFlow_pontential_on_graph", (DL_FUNC) &_HodgePotentialHumanFlow_pontential_on_graph, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_HodgePotentialHumanFlow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
